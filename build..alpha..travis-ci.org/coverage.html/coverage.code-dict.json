{"/home/travis/build/npmtest/node-npmtest-mongodb-backup/test.js":"/* istanbul instrument in package npmtest_mongodb_backup */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-mongodb-backup/lib.npmtest_mongodb_backup.js":"/* istanbul instrument in package npmtest_mongodb_backup */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_mongodb_backup = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_mongodb_backup = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-mongodb-backup/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-mongodb-backup && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_mongodb_backup */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_mongodb_backup\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_mongodb_backup.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_mongodb_backup.rollup.js'] =\n            local.assetsDict['/assets.npmtest_mongodb_backup.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_mongodb_backup.__dirname + '/lib.npmtest_mongodb_backup.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-mongodb-backup/node_modules/mongodb-backup/index.min.js":"\"use strict\";\n\nfunction error(err) {\n    err && logger(err.message);\n}\n\nfunction writeMetadata(collection, metadata, next) {\n    return collection.indexes(function(err, indexes) {\n        return err ? next(err) : void fs.writeFile(metadata + collection.collectionName, JSON.stringify(indexes), next);\n    });\n}\n\nfunction makeDir(pathname, next) {\n    fs.stat(pathname, function(err, stats) {\n        return err && \"ENOENT\" === err.code ? (logger(\"make dir at \" + pathname), fs.mkdir(pathname, function(err) {\n            next(err, pathname);\n        })) : stats && stats.isDirectory() === !1 ? (logger(\"unlink file at \" + pathname), \n        fs.unlink(pathname, function(err) {\n            return err ? next(err) : (logger(\"make dir at \" + pathname), void fs.mkdir(pathname, function(err) {\n                next(err, pathname);\n            }));\n        })) : void next(null, pathname);\n    });\n}\n\nfunction rmDir(pathname, next) {\n    fs.readdirSync(pathname).forEach(function(first) {\n        var database = pathname + first;\n        if (fs.statSync(database).isDirectory() === !1) return next(Error(\"path is not a Directory\"));\n        var metadata = \"\", collections = fs.readdirSync(database), metadataPath = path.join(database, \".metadata\");\n        return fs.existsSync(metadataPath) === !0 && (metadata = metadataPath + path.sep, \n        delete collections[collections.indexOf(\".metadata\")]), collections.forEach(function(second) {\n            var collection = path.join(database, second);\n            fs.statSync(collection).isDirectory() !== !1 && (fs.readdirSync(collection).forEach(function(third) {\n                var document = path.join(collection, third);\n                return fs.unlinkSync(document), next ? next(null, document) : \"\";\n            }), \"\" !== metadata && fs.unlinkSync(metadata + second), fs.rmdirSync(collection));\n        }), \"\" !== metadata && fs.rmdirSync(metadata), fs.rmdirSync(database);\n    });\n}\n\nfunction toJsonAsync(doc, collectionPath) {\n    fs.writeFile(collectionPath + doc._id + \".json\", JSON.stringify(doc));\n}\n\nfunction toBsonAsync(doc, collectionPath) {\n    fs.writeFile(collectionPath + doc._id + \".bson\", BSON.serialize(doc));\n}\n\nfunction allCollections(db, name, query, metadata, parser, next) {\n    return db.collections(function(err, collections) {\n        if (err) return next(err);\n        var last = ~~collections.length, index = 0;\n        return 0 === last ? next(err) : void collections.forEach(function(collection) {\n            return systemRegex.test(collection.collectionName) === !0 ? last === ++index ? next(null) : null : (logger(\"select collection \" + collection.collectionName), \n            void makeDir(name + collection.collectionName + path.sep, function(err, name) {\n                return err ? last === ++index ? next(err) : error(err) : void meta(collection, metadata, function() {\n                    var stream = collection.find(query).snapshot(!0).stream();\n                    stream.once(\"end\", function() {\n                        return last === ++index ? next(null) : null;\n                    }).on(\"data\", function(doc) {\n                        parser(doc, name);\n                    });\n                });\n            }));\n        });\n    });\n}\n\nfunction allCollectionsScan(db, name, numCursors, metadata, parser, next) {\n    return db.collections(function(err, collections) {\n        if (err) return next(err);\n        var last = ~~collections.length, index = 0;\n        return 0 === last ? next(null) : void collections.forEach(function(collection) {\n            return systemRegex.test(collection.collectionName) === !0 ? last === ++index ? next(null) : null : (logger(\"select collection scan \" + collection.collectionName), \n            void makeDir(name + collection.collectionName + path.sep, function(err, name) {\n                return err ? last === ++index ? next(err) : error(err) : void meta(collection, metadata, function() {\n                    collection.parallelCollectionScan({\n                        numCursors: numCursors\n                    }, function(err, cursors) {\n                        if (err) return last === ++index ? next(err) : error(err);\n                        var ii, cursorsDone;\n                        if (ii = cursorsDone = ~~cursors.length, 0 === ii) return last === ++index ? next(null) : null;\n                        for (var i = 0; i < ii; ++i) cursors[i].once(\"end\", function() {\n                            if (0 === --cursorsDone) return last === ++index ? next(null) : null;\n                        }).on(\"data\", function(doc) {\n                            parser(doc, name);\n                        });\n                    });\n                });\n            }));\n        });\n    });\n}\n\nfunction someCollections(db, name, query, metadata, parser, next, collections) {\n    var last = ~~collections.length, index = 0;\n    return 0 === last ? next(null) : void collections.forEach(function(collection) {\n        db.collection(collection, {\n            strict: !0\n        }, function(err, collection) {\n            return err ? last === ++index ? next(err) : error(err) : (logger(\"select collection \" + collection.collectionName), \n            void makeDir(name + collection.collectionName + path.sep, function(err, name) {\n                return err ? last === ++index ? next(err) : error(err) : void meta(collection, metadata, function() {\n                    var stream = collection.find(query).snapshot(!0).stream();\n                    stream.once(\"end\", function() {\n                        return last === ++index ? next(null) : null;\n                    }).on(\"data\", function(doc) {\n                        parser(doc, name);\n                    });\n                });\n            }));\n        });\n    });\n}\n\nfunction someCollectionsScan(db, name, numCursors, metadata, parser, next, collections) {\n    var last = ~~collections.length, index = 0;\n    return 0 === last ? next(null) : void collections.forEach(function(collection) {\n        db.collection(collection, {\n            strict: !0\n        }, function(err, collection) {\n            return err ? last === ++index ? next(err) : error(err) : (logger(\"select collection scan \" + collection.collectionName), \n            void makeDir(name + collection.collectionName + path.sep, function(err, name) {\n                return err ? last === ++index ? next(err) : error(err) : void meta(collection, metadata, function() {\n                    collection.parallelCollectionScan({\n                        numCursors: numCursors\n                    }, function(err, cursors) {\n                        if (err) return last === ++index ? next(err) : error(err);\n                        var ii, cursorsDone;\n                        if (ii = cursorsDone = ~~cursors.length, 0 === ii) return last === ++index ? next(null) : null;\n                        for (var i = 0; i < ii; ++i) cursors[i].once(\"end\", function() {\n                            if (0 === --cursorsDone) return last === ++index ? next(null) : null;\n                        }).on(\"data\", function(doc) {\n                            parser(doc, name);\n                        });\n                    });\n                });\n            }));\n        });\n    });\n}\n\nfunction wrapper(my) {\n    function callback(err) {\n        logger(\"backup stop\"), null !== my.callback ? (logger(\"callback run\"), my.callback(err)) : err && logger(err);\n    }\n    var parser;\n    if (\"function\" == typeof my.parser) parser = my.parser; else switch (my.parser.toLowerCase()) {\n      case \"bson\":\n        BSON = require(\"bson\"), BSON = new BSON(), parser = toBsonAsync;\n        break;\n\n      case \"json\":\n        parser = toJsonAsync;\n        break;\n\n      default:\n        throw new Error(\"missing parser option\");\n    }\n    var discriminator = allCollections;\n    if (null !== my.collections ? (discriminator = someCollections, my.numCursors && (discriminator = someCollectionsScan, \n    my.query = my.numCursors)) : my.numCursors && (discriminator = allCollectionsScan, \n    my.query = my.numCursors), null === my.logger) logger = function() {}; else {\n        logger = require(\"logger-request\")({\n            filename: my.logger,\n            standalone: !0,\n            daily: !0,\n            winston: {\n                logger: \"_mongo_b\" + my.logger,\n                level: \"info\",\n                json: !1\n            }\n        }), logger(\"backup start\");\n        var log = require(\"mongodb\").Logger;\n        log.setLevel(\"info\"), log.setCurrentLogger(function(msg) {\n            return logger(msg);\n        });\n    }\n    var metadata = \"\";\n    meta = my.metadata === !0 ? writeMetadata : function(a, b, c) {\n        return c();\n    }, require(\"mongodb\").MongoClient.connect(my.uri, my.options, function(err, db) {\n        if (logger(\"db open\"), err) return callback(err);\n        var root = null === my.tar ? my.root : my.dir;\n        makeDir(root, function(err, name) {\n            return err ? callback(err) : void makeDir(name + db.databaseName + path.sep, function(err, name) {\n                function go() {\n                    return discriminator(db, name, my.query, metadata, parser, function(err) {\n                        return logger(\"db close\"), db.close(), err ? callback(err) : void (my.tar ? makeDir(my.root, function(e, name) {\n                            err && error(err);\n                            var dest;\n                            my.stream ? (logger(\"send tar file to stream\"), dest = my.stream) : (logger(\"make tar file at \" + name + my.tar), \n                            dest = fs.createWriteStream(name + my.tar));\n                            var packer = require(\"tar\").Pack().on(\"error\", callback).on(\"end\", function() {\n                                rmDir(root), callback(null);\n                            });\n                            require(\"fstream\").Reader({\n                                path: root + db.databaseName,\n                                type: \"Directory\"\n                            }).on(\"error\", callback).pipe(packer).pipe(dest);\n                        }) : callback(null));\n                    }, my.collections);\n                }\n                return err ? callback(err) : void (my.metadata === !1 ? go() : (metadata = name + \".metadata\" + path.sep, \n                makeDir(metadata, go)));\n            });\n        });\n    });\n}\n\nfunction backup(options) {\n    var opt = options || Object.create(null);\n    if (!opt.uri) throw new Error(\"missing uri option\");\n    if (!opt.stream) {\n        if (!opt.root) throw new Error(\"missing root option\");\n        if (fs.existsSync(opt.root) && !fs.statSync(opt.root).isDirectory()) throw new Error(\"root option is not a directory\");\n    }\n    var my = {\n        dir: path.join(__dirname, \"dump\", path.sep),\n        uri: String(opt.uri),\n        root: path.resolve(String(opt.root || \"\")) + path.sep,\n        stream: opt.stream || null,\n        parser: opt.parser || \"bson\",\n        numCursors: ~~opt.numCursors,\n        collections: Array.isArray(opt.collections) ? opt.collections : null,\n        callback: \"function\" == typeof opt.callback ? opt.callback : null,\n        tar: \"string\" == typeof opt.tar ? opt.tar : null,\n        query: \"object\" == typeof opt.query ? opt.query : {},\n        logger: \"string\" == typeof opt.logger ? path.resolve(opt.logger) : null,\n        options: \"object\" == typeof opt.options ? opt.options : {},\n        metadata: Boolean(opt.metadata)\n    };\n    return my.stream && (my.tar = !0), wrapper(my);\n}\n\nvar systemRegex = /^system\\./, fs = require(\"graceful-fs\"), path = require(\"path\"), BSON, logger, meta;\n\nmodule.exports = backup;\n","/home/travis/build/npmtest/node-npmtest-mongodb-backup/node_modules/mongodb-backup/index.js":"'use strict';\n/**\n * @file mongodb-backup main\n * @module mongodb-backup\n * @subpackage main\n * @version 1.6.0\n * @author hex7c0 <hex7c0@gmail.com>\n * @copyright hex7c0 2014\n * @license GPLv3\n */\n\n/*\n * initialize module\n */\nvar systemRegex = /^system\\./;\nvar fs = require('graceful-fs');\nvar path = require('path');\nvar BSON;\nvar logger;\nvar meta;\n\n/*\n * functions\n */\n/**\n * error handler\n * \n * @function error\n * @param {Object} err - raised error\n */\nfunction error(err) {\n\n  if (err) {\n    logger(err.message);\n  }\n}\n\n/**\n * save collection metadata to file\n * \n * @function writeMetadata\n * @param {Object} collection - db collection\n * @param {String} metadata - path of metadata\n * @param {Function} next - callback\n */\nfunction writeMetadata(collection, metadata, next) {\n\n  return collection.indexes(function(err, indexes) {\n\n    if (err) {\n      return next(err);\n    }\n\n    fs.writeFile(metadata + collection.collectionName, JSON.stringify(indexes),\n      next);\n  });\n}\n\n/**\n * make dir\n * \n * @function makeDir\n * @param {String} pathname - pathname of dir\n * @param {Function} next - callback\n */\nfunction makeDir(pathname, next) {\n\n  fs.stat(pathname, function(err, stats) {\n\n    if (err && err.code === 'ENOENT') { // no file or dir\n      logger('make dir at ' + pathname);\n      return fs.mkdir(pathname, function(err) {\n\n        next(err, pathname);\n      });\n\n    } else if (stats && stats.isDirectory() === false) { // pathname is a file\n      logger('unlink file at ' + pathname);\n      return fs.unlink(pathname, function(err) {\n\n        if (err) { // unlink fail. permission maybe\n          return next(err);\n        }\n\n        logger('make dir at ' + pathname);\n        fs.mkdir(pathname, function(err) {\n\n          next(err, pathname);\n        });\n      });\n\n    } else { // already a dir\n      next(null, pathname);\n    }\n  });\n}\n\n/**\n * remove dir\n * \n * @function rmDir\n * @param {String} pathname - path of dir\n * @param {Function} [next] - callback\n */\nfunction rmDir(pathname, next) {\n\n  fs.readdirSync(pathname).forEach(function(first) { // database\n\n    var database = pathname + first;\n    if (fs.statSync(database).isDirectory() === false) {\n      return next(Error('path is not a Directory'));\n    }\n\n    var metadata = '';\n    var collections = fs.readdirSync(database);\n    var metadataPath = path.join(database, '.metadata');\n    if (fs.existsSync(metadataPath) === true) {\n      metadata = metadataPath + path.sep;\n      delete collections[collections.indexOf('.metadata')]; // undefined is not a dir\n    }\n\n    collections.forEach(function(second) { // collection\n\n      var collection = path.join(database, second);\n      if (fs.statSync(collection).isDirectory() === false) {\n        return;\n      }\n\n      fs.readdirSync(collection).forEach(function(third) { // document\n\n        var document = path.join(collection, third);\n        fs.unlinkSync(document);\n        return next ? next(null, document) : '';\n      });\n\n      if (metadata !== '') {\n        fs.unlinkSync(metadata + second);\n      }\n      fs.rmdirSync(collection);\n    });\n\n    if (metadata !== '') {\n      fs.rmdirSync(metadata);\n    }\n    return fs.rmdirSync(database);\n  });\n}\n\n/**\n * JSON parser async\n * \n * @function toJson\n * @param {Objecy} doc - document from stream\n * @param {String} collectionPath - path of collection\n */\nfunction toJsonAsync(doc, collectionPath) {\n\n  fs.writeFile(collectionPath + doc._id + '.json', JSON.stringify(doc));\n}\n\n/**\n * BSON parser async\n * \n * @function toBson\n * @param {Objecy} doc - document from stream\n * @param {String} collectionPath - path of collection\n */\nfunction toBsonAsync(doc, collectionPath) {\n\n  fs.writeFile(collectionPath + doc._id + '.bson', BSON.serialize(doc));\n}\n\n/**\n * get data from all available collections\n * \n * @function allCollections\n * @param {Object} db - database\n * @param {String} name - path of dir\n * @param {Object} query - find query\n * @param {String} metadata - path of metadata\n * @param {Function} parser - data parser\n * @param {Function} next - callback\n */\nfunction allCollections(db, name, query, metadata, parser, next) {\n\n  return db.collections(function(err, collections) {\n\n    if (err) {\n      return next(err);\n    }\n\n    var last = ~~collections.length, index = 0;\n    if (last === 0) { // empty set\n      return next(err);\n    }\n\n    collections.forEach(function(collection) {\n\n      if (systemRegex.test(collection.collectionName) === true) {\n        return last === ++index ? next(null) : null;\n      }\n\n      logger('select collection ' + collection.collectionName);\n      makeDir(name + collection.collectionName + path.sep, function(err, name) {\n\n        if (err) {\n          return last === ++index ? next(err) : error(err);\n        }\n\n        meta(collection, metadata, function() {\n\n          var stream = collection.find(query).snapshot(true).stream();\n\n          stream.once('end', function() {\n\n            return last === ++index ? next(null) : null;\n          }).on('data', function(doc) {\n\n            parser(doc, name);\n          });\n        });\n      });\n    });\n  });\n}\n\n/**\n * get data from all available collections without query (parallelCollectionScan)\n * \n * @function allCollectionsScan\n * @param {Object} db - database\n * @param {String} name - path of dir\n * @param {Integer} numCursors - number of multiple cursors [1:10000]\n * @param {String} metadata - path of metadata\n * @param {Function} parser - data parser\n * @param {Function} next - callback\n */\nfunction allCollectionsScan(db, name, numCursors, metadata, parser, next) {\n\n  return db.collections(function(err, collections) {\n\n    if (err) {\n      return next(err);\n    }\n\n    var last = ~~collections.length, index = 0;\n    if (last === 0) { // empty set\n      return next(null);\n    }\n\n    collections.forEach(function(collection) {\n\n      if (systemRegex.test(collection.collectionName) === true) {\n        return last === ++index ? next(null) : null;\n      }\n\n      logger('select collection scan ' + collection.collectionName);\n      makeDir(name + collection.collectionName + path.sep, function(err, name) {\n\n        if (err) {\n          return last === ++index ? next(err) : error(err);\n        }\n\n        meta(collection, metadata, function() {\n\n          collection.parallelCollectionScan({\n            numCursors: numCursors\n          }, function(err, cursors) {\n\n            if (err) {\n              return last === ++index ? next(err) : error(err);\n            }\n\n            var ii, cursorsDone;\n            ii = cursorsDone = ~~cursors.length;\n            if (ii === 0) { // empty set\n              return last === ++index ? next(null) : null;\n            }\n\n            for (var i = 0; i < ii; ++i) {\n              cursors[i].once('end', function() {\n\n                // No more cursors let's ensure we got all results\n                if (--cursorsDone === 0) {\n                  return last === ++index ? next(null) : null;\n                }\n              }).on('data', function(doc) {\n\n                parser(doc, name);\n              });\n            }\n          });\n        });\n      });\n    });\n  });\n}\n\n/**\n * get data from some collections\n * \n * @function someCollections\n * @param {Object} db - database\n * @param {String} name - path of dir\n * @param {Object} query - find query\n * @param {String} metadata - path of metadata\n * @param {Function} parser - data parser\n * @param {Function} next - callback\n * @param {Array} collections - selected collections\n */\nfunction someCollections(db, name, query, metadata, parser, next, collections) {\n\n  var last = ~~collections.length, index = 0;\n  if (last === 0) {\n    return next(null);\n  }\n\n  collections.forEach(function(collection) {\n\n    db.collection(collection, {\n      strict: true\n    }, function(err, collection) {\n\n      if (err) { // returns an error if the collection does not exist\n        return last === ++index ? next(err) : error(err);\n      }\n\n      logger('select collection ' + collection.collectionName);\n      makeDir(name + collection.collectionName + path.sep, function(err, name) {\n\n        if (err) {\n          return last === ++index ? next(err) : error(err);\n        }\n\n        meta(collection, metadata, function() {\n\n          var stream = collection.find(query).snapshot(true).stream();\n\n          stream.once('end', function() {\n\n            return last === ++index ? next(null) : null;\n          }).on('data', function(doc) {\n\n            parser(doc, name);\n          });\n        });\n      });\n    });\n  });\n}\n\n/**\n * get data from some collections without query (parallelCollectionScan)\n * \n * @function someCollectionsScan\n * @param {Object} db - database\n * @param {String} name - path of dir\n * @param {Integer} numCursors - number of multiple cursors [1:10000]\n * @param {String} metadata - path of metadata\n * @param {Function} parser - data parser\n * @param {Function} next - callback\n * @param {Array} collections - selected collections\n */\nfunction someCollectionsScan(db, name, numCursors, metadata, parser, next,\n                             collections) {\n\n  var last = ~~collections.length, index = 0;\n  if (last === 0) { // empty set\n    return next(null);\n  }\n\n  collections.forEach(function(collection) {\n\n    db.collection(collection, {\n      strict: true\n    }, function(err, collection) {\n\n      if (err) { // returns an error if the collection does not exist\n        return last === ++index ? next(err) : error(err);\n      }\n\n      logger('select collection scan ' + collection.collectionName);\n      makeDir(name + collection.collectionName + path.sep, function(err, name) {\n\n        if (err) {\n          return last === ++index ? next(err) : error(err);\n        }\n\n        meta(collection, metadata, function() {\n\n          collection.parallelCollectionScan({\n            numCursors: numCursors\n          }, function(err, cursors) {\n\n            if (err) {\n              return last === ++index ? next(err) : error(err);\n            }\n\n            var ii, cursorsDone;\n            ii = cursorsDone = ~~cursors.length;\n            if (ii === 0) { // empty set\n              return last === ++index ? next(null) : null;\n            }\n\n            for (var i = 0; i < ii; ++i) {\n              cursors[i].once('end', function() {\n\n                // No more cursors let's ensure we got all results\n                if (--cursorsDone === 0) {\n                  return last === ++index ? next(null) : null;\n                }\n              }).on('data', function(doc) {\n\n                parser(doc, name);\n              });\n            }\n          });\n        });\n      });\n    });\n  });\n}\n\n/**\n * function wrapper\n * \n * @function wrapper\n * @param {Object} my - parsed options\n */\nfunction wrapper(my) {\n\n  var parser;\n  if (typeof my.parser === 'function') {\n    parser = my.parser;\n  } else {\n    switch (my.parser.toLowerCase()) {\n      case 'bson':\n        BSON = require('bson');\n        BSON = new BSON();\n        parser = toBsonAsync;\n        break;\n      case 'json':\n        // JSON error on ObjectId, Date and Long\n        parser = toJsonAsync;\n        break;\n      default:\n        throw new Error('missing parser option');\n    }\n  }\n\n  var discriminator = allCollections;\n  if (my.collections !== null) {\n    discriminator = someCollections;\n    if (my.numCursors) {\n      discriminator = someCollectionsScan;\n      my.query = my.numCursors; // override\n    }\n  } else if (my.numCursors) {\n    discriminator = allCollectionsScan;\n    my.query = my.numCursors; // override\n  }\n\n  if (my.logger === null) {\n    logger = function() {\n\n      return;\n    };\n  } else {\n    logger = require('logger-request')({\n      filename: my.logger,\n      standalone: true,\n      daily: true,\n      winston: {\n        logger: '_mongo_b' + my.logger,\n        level: 'info',\n        json: false\n      }\n    });\n    logger('backup start');\n    var log = require('mongodb').Logger;\n    log.setLevel('info');\n    log.setCurrentLogger(function(msg) {\n\n      return logger(msg);\n    });\n  }\n\n  var metadata = '';\n  if (my.metadata === true) {\n    meta = writeMetadata;\n  } else {\n    meta = function(a, b, c) {\n\n      return c();\n    };\n  }\n\n  /**\n   * latest callback\n   * \n   * @return {Null}\n   */\n  function callback(err) {\n\n    logger('backup stop');\n    if (my.callback !== null) {\n      logger('callback run');\n      my.callback(err);\n\n    } else if (err) {\n      logger(err);\n    }\n  }\n\n  require('mongodb').MongoClient.connect(my.uri, my.options, function(err, db) {\n\n    logger('db open');\n    if (err) {\n      return callback(err);\n    }\n\n    var root = my.tar === null ? my.root : my.dir;\n    makeDir(root, function(err, name) {\n\n      if (err) {\n        return callback(err);\n      }\n\n      makeDir(name + db.databaseName + path.sep, function(err, name) {\n\n        function go() {\n\n          // waiting for `db.fsyncLock()` on node driver\n          return discriminator(db, name, my.query, metadata, parser,\n            function(err) {\n\n              logger('db close');\n              db.close();\n              if (err) {\n                return callback(err);\n              }\n\n              if (my.tar) {\n                makeDir(my.root, function(e, name) {\n\n                  if (err) {\n                    error(err);\n                  }\n\n                  var dest;\n                  if (my.stream) { // user stream\n                    logger('send tar file to stream');\n                    dest = my.stream;\n                  } else { // filesystem stream\n                    logger('make tar file at ' + name + my.tar);\n                    dest = fs.createWriteStream(name + my.tar);\n                  }\n\n                  var packer = require('tar').Pack().on('error', callback).on(\n                    'end', function() {\n\n                      rmDir(root);\n                      callback(null);\n                    });\n\n                  require('fstream').Reader({\n                    path: root + db.databaseName,\n                    type: 'Directory'\n                  }).on('error', callback).pipe(packer).pipe(dest);\n                });\n\n              } else {\n                callback(null);\n              }\n            }, my.collections);\n        }\n\n        if (err) {\n          return callback(err);\n        }\n\n        if (my.metadata === false) {\n          go();\n        } else {\n          metadata = name + '.metadata' + path.sep;\n          makeDir(metadata, go);\n        }\n      });\n    });\n  });\n}\n\n/**\n * option setting\n * \n * @exports backup\n * @function backup\n * @param {Object} options - various options. Check README.md\n */\nfunction backup(options) {\n\n  var opt = options || Object.create(null);\n  if (!opt.uri) {\n    throw new Error('missing uri option');\n  }\n  if (!opt.stream) {\n    if (!opt.root) {\n      throw new Error('missing root option');\n    } else if (fs.existsSync(opt.root) && !fs.statSync(opt.root).isDirectory()) {\n      throw new Error('root option is not a directory');\n    }\n  }\n\n  var my = {\n    dir: path.join(__dirname, 'dump', path.sep),\n    uri: String(opt.uri),\n    root: path.resolve(String(opt.root || '')) + path.sep,\n    stream: opt.stream || null,\n    parser: opt.parser || 'bson',\n    numCursors: ~~opt.numCursors,\n    collections: Array.isArray(opt.collections) ? opt.collections : null,\n    callback: typeof (opt.callback) == 'function' ? opt.callback : null,\n    tar: typeof opt.tar === 'string' ? opt.tar : null,\n    query: typeof opt.query === 'object' ? opt.query : {},\n    logger: typeof opt.logger === 'string' ? path.resolve(opt.logger) : null,\n    options: typeof opt.options === 'object' ? opt.options : {},\n    metadata: Boolean(opt.metadata)\n  };\n  if (my.stream) {\n    my.tar = true; // override\n  }\n  return wrapper(my);\n}\nmodule.exports = backup;\n"}